public class KokoEatingBananas {

    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = getMax(piles); // maximum number in piles
        int result = high;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (canEatAll(piles, h, mid)) {
                result = mid;      // valid k found, try smaller
                high = mid - 1;
            } else {
                low = mid + 1;     // not enough speed, try bigger
            }
        }

        return result;
    }

    private boolean canEatAll(int[] piles, int h, int k) {
        int hours = 0;

        for (int pile : piles) {
            // ceil(pile / k) = (pile + k - 1) / k (to avoid float)
            hours += (pile + k - 1) / k;
        }

        return hours <= h;
    }

    private int getMax(int[] piles) {
        int max = piles[0];
        for (int pile : piles) {
            max = Math.max(max, pile);
        }
        return max;
    }
    public static void main(String[] args) {
        KokoEatingBananas obj = new KokoEatingBananas();
        int[] piles = {30, 11, 23, 4, 20};
        int h = 6;

        int result = obj.minEatingSpeed(piles, h);
        System.out.println("Minimum eating speed: " + result);
    }
}
